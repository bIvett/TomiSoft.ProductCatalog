openapi: "3.0.0"
info:
  title: "TomiSoft Product Database Api"
  version: "1.0"
  description: "This document describes the API provided by the TomiSoft.ProductCatalog.Server microservice. This microservice provides information about products, based on barcode."
  contact:
    name: "Tamás Sinku"
    url: "https://github.com/std66/TomiSoft.ProductCatalog"
    email: "sinkutamas@gmail.com"
tags:
  - name: Product
    description: "This tag refers to product-related operations"
  - name: System
    description: "This tag refers to system-related operations"
  - name: Manufacturer
    description: "This tag refers to manufacturer-related operations"
paths:
  /SupportedLanguages:
    get:
      tags:
        - System
      description: "Gets the languages supported by the system"
      operationId: GetSupportedLanguages
      responses:
        200:
          description: "The request succeeded, and the server provided information about its language support"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SystemSupportedLanguagesDto'
        500:
          $ref: '#/components/responses/ServerErrorResponse'

  /Manufacturer:
    get:
      tags:
        - Manufacturer
      description: "Gets information about every known manufacturers"
      operationId: GetAllManufacturers
      responses:
        200:
          description: "The server successfully fulfilled the request and returned all the available manufacturer's information"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ManufacturerInfoDto'
        500:
          $ref: '#/components/responses/ServerErrorResponse'
          
    post:
      tags:
        - Manufacturer
      description: "Saves a new manufacturer"
      operationId: PostNewManufacturer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostManufacturerRequestDto'
      responses:
        201:
          description: "The manufacturer has been successfully created."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostManufacturerResponseDto'
        500:
          $ref: '#/components/responses/ServerErrorResponse'

  /Product/{barcode}:
    get:
      tags: 
        - Product
      description: "Gets a product by barcode"
      operationId: GetByBarcode
      parameters: 
        - $ref: '#/components/parameters/AcceptLanguage'
        - $ref: '#/components/parameters/Barcode'
      responses:
        200:
          description: "A product has been found with the given barcode"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProductInformationDto"
        404:
          $ref: '#/components/responses/ProductNotFoundResponse'
        500:
          $ref: '#/components/responses/ServerErrorResponse'
                
    post:
      tags:
        - Product
      description: "Saves a new product with the given barcode"
      operationId: PostNewProduct
      parameters: 
        - $ref: '#/components/parameters/Barcode'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostProductRequestDto'
      responses:
        204:
          description: "The new product has been saved successfully."
        409:
          description: "A product with the given barcode already exists."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResultDto"
        500:
          $ref: '#/components/responses/ServerErrorResponse'
    
    patch:
      tags:
        - Product
      description: "Updates the information of an already existing product"
      operationId: PatchProduct
      parameters: 
        - $ref: '#/components/parameters/Barcode'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchProductRequestDto'
      responses:
        204:
          description: "The product is successfully updated."
        404:
          $ref: '#/components/responses/ProductNotFoundResponse'
        500:
          $ref: '#/components/responses/ServerErrorResponse'
          
    delete:
      tags:
        - Product
      description: "Deletes a product along with all its associated contents (images)."
      operationId: DeleteByBarcode
      parameters: 
        - $ref: '#/components/parameters/Barcode'
      responses:
        204:
          description: "The product is successfully deleted."
        404:
          $ref: '#/components/responses/ProductNotFoundResponse'
        500:
          $ref: '#/components/responses/ServerErrorResponse'
        
    
components:
  parameters:
    Barcode:
      in: path
      name: barcode
      required: true
      description: "The barcode of the requested product (eg. EAN-13)."
      schema:
        $ref: '#/components/schemas/Barcode'
    AcceptLanguage:
      in: header
      name: "Accept-Language"
      required: false
      description: "A list of the languages that the client accepts, as defined in RFC-7231, section 5.3.5. If not provided, or the server does not support any of the requested languages, the content will be returned in the server's default language. The operation with ID 'GetSupportedLanguages' provides you all the languages supported by the server."
      schema:
        type: string
        example: fr-CH, fr;q=0.9, en;q=0.8, de;q=0.7, *;q=0.5
  responses:
    ProductNotFoundResponse:
      description: "No products were found with the given barcode"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResultDto"
    ServerErrorResponse:
      description: "Server error occurred"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResultDto"
  schemas:
    Barcode:
      type: string
      description: "The product's barcode"
      example: "4047443305244"
    ManufacturerId:
      type: integer
      format: int32
      example: 341
      description: "The unique identifier of the manufacturer"
    ImageId:
      type: integer
      format: int32
      example: 152341
      description: "The unique ID of the image"
    CategoryId:
      type: integer
      format: int32
      example: 15
      description: "The unique ID of the category"
    ErrorResultDto:
      type: object
      properties:
        ErrorCode:
          type: string
          description: "An error code representing the root cause of the failure"
          enum:
            - Successful
            - GenericError
            - UnauthorizedAccess
            - ProductNotFound
            - ProductAlreadyExists
          example: "ProductNotFound"
        Message:
          type: string
          description: "A human-friendly error message in English"
          example: "No products were found with the specified barcode"
    PostManufacturerRequestDto:
      type: object
      description: "Provides information about a manufacturer that needs to be saved"
      properties:
        Name:
          type: string
          description: "The manufacturer's legal name"
          example: "Hama GmbH & Co KG"
        Country:
          type: string
          description: "The ISO 3166-2 code of the country in which the manufacturer is registered"
          example: "DE"
        Address:
          type: string
          description: "The manufacturer's legal address"
          example: "86652 Monheim"
        Website:
          type: string
          description: "The URI of the manufacturer's official website"
          example: "https://www.hama.com"
      required: 
        - Name
        - Country
        - Address
    PostManufacturerResponseDto:
      type: object
      description: "Provides information about a manufacturer that needs to be saved"
      properties:
        ManufacturerID:
          $ref: '#/components/schemas/ManufacturerId'
    PostProductRequestDto:
      type: object
      description: "Provides information about a product that needs to be saved"
      properties:
        ManufacturerId:
          $ref: '#/components/schemas/ManufacturerId'
        CategoryId:
          $ref: '#/components/schemas/CategoryId'
        ProductName:
          description: "A key-value pair object representing the product name for a specific language."
          type: object
          additionalProperties:
            type: string
          example: 
            hu-HU: "Példa termék"
            en-US: "Sample product"
      required:
        - ProductName
    PatchProductRequestDto:
      type: object
      description: "Provides modified information about a product that needs to be updated. If the category or the manufacturer should not be changed, their original value must be provided. To remove the product name for a specific language, provide the language code with null-value. To add a new or modify an existing product name translation, provide the language code with a non-null, non-empty string value."
      properties:
        ManufacturerId:
          $ref: '#/components/schemas/ManufacturerId'
        CategoryId:
          $ref: '#/components/schemas/CategoryId'
        ProductName:
          description: "A key-value pair object representing the product name for a specific language."
          type: object
          additionalProperties:
            type: string
          example: 
            hu-HU: "Példa termék"
            en-US: "Sample product"
      required:
        - ProductName
    SystemSupportedLanguagesDto:
      type: object
      description: "Provides information about the languages supported by the system"
      properties:
        SupportedLanguages:
          type: array
          description: "Contains all the languages supported by the system. By providing one of these languages in Accept-Language header, you can get localized responses"
          items:
            type: string
            description: "An IETF language tag"
            example:
              - "hu-HU"
              - "en-US"
              - "zh-CN"
              - "ja-JP"
        DefaultLanguage:
          type: string
          description: "An IETF language tag representing the default language of the system. Used as a fallback value if Accept-Language is not provided in the request or it cannot be fulfilled"
          example: "hu-HU"
    ManufacturerInfoDto:
      type: object
      description: "Brief information about a manufacturer"
      properties:
        ManufacturerId:
          $ref: '#/components/schemas/ManufacturerId'
        Name:
          type: string
          description: "The manufacturer's name"
          example: "Hama GmbH & Co KG"
        CountryCode:
          type: string
          description: "The manufacturer's country code in ISO 3166-2 format"
          example: "DE"
        Address:
          type: string
          description: "The address of the manufacturer's headquarters"
          example: "86652 Monheim"
        Website:
          type: string
          description: "The manufacturer's website"
          nullable: true
          example: "http://www.hama.com"
    CategoryDto:
      type: object
      properties:
        CategoryId:
          $ref: '#/components/schemas/CategoryId'
        Name:
          type: string
          description: "The category's name"
          example: "Computer peripherals"
    ProductImageDto:
      type: object
      properties:
        ImageUrl:
          type: string
          description: "The URL of the image"
          example: "http://somelocation.com/sample_product_image.jpg"
        ImageID:
          $ref: '#/components/schemas/ImageId'
    ProductInformationDto:
      type: object
      properties:
        Barcode:
          $ref: "#/components/schemas/Barcode"
        Name:
          type: string
          example: "Optical mouse AM-8000"
          description: "The name of the product"
        Manufacturer:
          $ref: '#/components/schemas/ManufacturerInfoDto'
        Images:
          type: array
          description: "Contains URLs to sample images of the product. If there are no images, this will be an empty array"
          items:
            $ref: '#/components/schemas/ProductImageDto'
        Category:
          $ref: '#/components/schemas/CategoryDto'